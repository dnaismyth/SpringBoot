										   
sql.workout.queryDeleteWorkoutReferencesByOwnerId = DELETE FROM workout WHERE owner_id = :ownerId;
										   
sql.workout.findWorkoutsForUserFeed = SELECT w.id, w.owner_id, w.description, w.created_date, w.duration, w.distance, \
					w.address, w.showtype, w.media_id, m.filename, fu.username, fu.avatar \
					FROM workout w \
					JOIN media m ON m.id = w.media_id \
					JOIN flow_user fu ON fu.id = w.owner_id \
					JOIN feed_workout fw ON fw.workout_id = w.id \
					JOIN feed f ON f.id = fw.feed_id \
					WHERE f.user_id = :userId \
					ORDER BY w.created_date DESC

sql.user.queryUserByName = SELECT u.id, u.name, u.avatar, u.username FROM flow_user u \
				WHERE lower(u.name) LIKE lower(:name) OR lower(u.username) LIKE lower(:name) AND \
				u.role = 'USER'
				
sql.user.queryTrendingUsers = SELECT u.id, u.name, u.avatar, u.username FROM flow_user u \
				JOIN workout w ON w.owner_id = u.id \
				JOIN workout_favourite wf ON wf.workout_id = w.id \
				GROUP BY u.id \
				ORDER BY COUNT(u.id) DESC \
				LIMIT 5

sql.authority.insertUserRole = INSERT into user_authority (id, authority) \
							   VALUES (:id, :authority)
				
sql.follow.findFollowersByUserId = SELECT f.user_id \
								   FROM follow f \
								   WHERE f.target_id= :userId
								   
sql.event.removeEventReferencesByEventId = DELETE FROM event_interest WHERE event_id= :eventId; \

sql.quest.queryFindUsersCurrentQuests = SELECT q.id, q.created_date, q.start_time, q.end_time, q.description, \
										  q.title, q.experience, q.target_value, q.objective_type ot, q.unit_of_measurement uom \
										  FROM quest q \
										  JOIN quest_progress qp ON qp.quest_id = q.id \
										  WHERE qp.user_id = :userId

				
					
